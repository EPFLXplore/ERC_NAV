# Generate and publish the global costmap with values between 0 and 255, where 0 is free space, 254 is
# lethal space, and 255 is unknown space. This costmap is computed from all the published occupancy grids that
# have values between 0 and 100.
# The global costmap is used by the planner to compute a path from the start to the goal.
global_costmap:
  global_costmap:
    ros__parameters:
      ## Robot parameters
      global_frame: map
      robot_base_frame: base_link
      # robot_radius: 0.80
      footprint: "[ [-0.7, 0.6], [0.7, 0.6], [0.7, -0.6], [-0.7, -0.6] ]"   
      # footprint_padding: 0.01
      # footprint: []
      # observation_sources: []
      ## Map parameters
      height: 50
      width: 50
      origin_x: -25.0
      origin_y: -25.0
      # resolution: 0.1953125
      track_unknown_space: True
      rolling_window: False
      ## Cost parameters
      # All values of the occupancy grids that are superior or equal to min(lethal_cost_threshold, 100)
      # are considered lethal. The occupancy grid only has values between 0 and 100, that are then automatically
      # scaled to values between 0 and 254 to create the final costmap.
      # The value 255 is then used to represent unknown space, and the value 254 is used to represent lethal space.
      lethal_cost_threshold: 100
      unknown_cost_value: 255
      trinary_costmap: False
      use_maximum: False
      ## Topic parameters
      # map_topic: /lio_sam/map
      update_frequency: 1.0
      publish_frequency: 1.0
      use_sim_time: False
      always_send_full_costmap: True
      transform_tolerance: 0.3
      initial_transform_timeout: 60
      ## Layers parameters
      plugins: [ "inflation_layer", "obstacle_layer"]
      # static_layer:
      #   plugin: "nav2_costmap_2d::StaticLayer"
      #   enabled: True
      #   footprint_clearing_enabled: False
      #   map_topic: /lio_sam/map
      #   subscribe_to_updates: True
      #   map_subscribe_transient_local: True
      #   transform_tolerance: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        cost_scaling_factor: 1.0
        inflation_radius: 0.7
        inflate_unknown: False
        inflate_around_unknown: False
      ## Filters parameters
      # filter: []
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources:  lidar_filtered_pcd  
        lidar_filtered_pcd:
          topic: /lidar_filter/filtered_points
          sensor_frame: lidar_link
          data_type: "PointCloud2"
          max_obstacle_height: 4.0
          min_obstacle_height: -2.0
          obstacle_max_range: 30.0
          obstacle_min_range: 0.0
          clearing: True
          marking: True

      always_send_full_costmap: True


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0 
      publish_frequency: 5.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: True
      width: 6
      height: 6
      resolution: 0.1
      # robot_radius: 0.05 # 1.0
      footprint: "[ [-0.7, 0.6], [0.7, 0.6], [0.7, -0.6], [-0.7, -0.6] ]"   
      plugins: ["obstacle_layer","inflation_layer"]
      lethal_cost_threshold: 70

     
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        combination_method: 1
        inf_is_valid: False
        observation_sources:   pcd 

        pcd:
          topic: /lidar_filter/filtered_points
          sensor_frame: lidar_link
          data_type: "PointCloud2"
          max_obstacle_height: 4.0
          min_obstacle_height: -2.0
          # raytrace_min_range: 0.0
          # raytrace_max_range: 11.0
          # obstacle_max_range: 10.0 #100.0
          obstacle_min_range: 0.0
          # raytrace_range: 11.0
          obstacle_range: 30.0
          clearing: False
          marking: True

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius:  0.5

      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

# local_costmap:
#   local_costmap:
#     ros__parameters:
#       update_frequency: 5.0
#       publish_frequency: 2.0
#       global_frame: odom
#       robot_base_frame: base_link
#       rolling_window: true
#       width: 3
#       height: 3
#       resolution: 0.05
#       robot_radius: 0.80

# Generate and publish the static map occupancy grid. This occupancy grid is used to generate the global costmap.
# map_server:
#   ros__parameters:
#     use_sim_time: False
#     topic_name: "map"
#     frame_id: "map"
#     yaml_filename: "map_server_params.yaml"

# Save the map to a file if neededm when the map is received from the map server.
# map_saver:
#   ros__parameters:
#     use_sim_time: False
#     save_map_timeout: 5.0
#     free_thresh_default: 0.25
#     occupied_thresh_default: 0.65
#     map_subscribe_transient_local: True

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /lio_sam/mapping/odometry
    bt_loop_duration: 10
    bt_ticker_tick_rate: 10.0 
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False
    hz: 1.0

planner_server:
  ros__parameters:
    ## Server parameters
    use_sim_time: False
    expected_planner_frequency: 1.0
    action_server_result_timeout: 10
    ## Plugins parameters
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      use_astar: True
      tolerance: 0.5
      allow_unknown: True
      use_final_approach_orientation: False

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    ## Server parameters
    use_sim_time: False
    controller_frequency: 1.0
    odom_topic: "/lio_sam/mapping/odometry"
    # Min velocities to ignore
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugin: "goal_checker"
    ## Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    ## Goal checker parameters
    goal_checker:
      # stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      # xy_goal_tolerance: 0.5
      # yaw_goal_tolerance: 0.5
    ## Planner parameters
    controller_plugins: ["FollowPath"]
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      # Speeds
      min_vel_x: 0.0
      max_vel_x: 0.3
      min_vel_y: 0.0
      max_vel_y: 0.0
      min_speed_theta: -1.0
      max_vel_theta: 0.5
      min_speed_xy: 0.0
      max_speed_xy: 0.3
      # Accelerations
      decel_lim_x: -1.0
      acc_lim_x: 1.0
      decel_lim_y: 0.0
      acc_lim_y: 0.0
      decel_lim_theta: -3.0
      acc_lim_theta: 3.0
      # Velocity samples
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      # Time to simulate ahead
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics:
        [
          "RotateToGoal",
          "Oscillation",
          "BaseObstacle",
          "GoalAlign",
          "PathAlign",
          "PathDist",
          "GoalDist",
        ]
      BaseObstacle.scale: 30.0
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

robot_state_publisher:
  ros__parameters:
    use_sim_time: False
