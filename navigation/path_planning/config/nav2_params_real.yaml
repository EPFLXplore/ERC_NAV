# Generate and publish the global costmap with values between 0 and 255, where 0 is free space, 254 is
# lethal space, and 255 is unknown space. This costmap is computed from all the published occupancy grids that
# have values between 0 and 100.
# The global costmap is used by the planner to compute a path from the start to the goal.
global_costmap:
  global_costmap:
    ros__parameters:
      ## Robot parameters
      global_frame: map
      robot_base_frame: base_link
      # robot_radius: 0.80
      footprint: "[ [-0.7, 0.6], [0.7, 0.6], [0.7, -0.6], [-0.7, -0.6] ]"
      # footprint_padding: 0.01
      # footprint: []
      # observation_sources: []
      ## Map parameters
      height: 144
      width: 256
      origin_x: -9.5
      origin_y: -17.5
      resolution: 0.195
      track_unknown_space: True
      rolling_window: False
      ## Cost parameters
      # All values of the occupancy grids that are superior or equal to min(lethal_cost_threshold, 100)
      # are considered lethal. The occupancy grid only has values between 0 and 100, that are then automatically
      # scaled to values between 0 and 254 to create the final costmap.
      # The value 255 is then used to represent unknown space, and the value 254 is used to represent lethal space.
      lethal_cost_threshold: 100
      unknown_cost_value: 255
      trinary_costmap: False
      use_maximum: False
      ## Topic parameters
      map_topic: /map
      update_frequency: 1.0
      publish_frequency: 1.0
      use_sim_time: False
      always_send_full_costmap: True
      transform_tolerance: 0.3
      initial_transform_timeout: 60
      ## Layers parameters
      plugins: ["obstacle_layer", "static_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: True
        footprint_clearing_enabled: False
        map_topic: /map
        subscribe_to_updates: True
        map_subscribe_transient_local: True
        transform_tolerance: 0.0
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        cost_scaling_factor: 0.0
        inflation_radius: 0.2
        inflate_unknown: False
        inflate_around_unknown: False
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: lidar_filtered_pcd
        lidar_filtered_pcd:
          topic: /lidar_filter/filtered_points
          sensor_frame: lidar_link
          data_type: "PointCloud2"
          max_obstacle_height: 4.0
          min_obstacle_height: 0.5
          obstacle_max_range: 60.0
          obstacle_min_range: 1.0
          clearing: True
          marking: True
      ## Filters parameters
      # filter: []

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0 
      publish_frequency: 5.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: True
      width: 6
      height: 6
      resolution: 0.1
      # robot_radius: 0.05 # 1.0
      footprint: "[ [-0.7, 0.6], [0.7, 0.6], [0.7, -0.6], [-0.7, -0.6] ]"   
      plugins: ["obstacle_layer","inflation_layer"]
      lethal_cost_threshold: 70     
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        combination_method: 1
        inf_is_valid: False
        observation_sources: pcd 
        footprint_clearing_enabled : True
        pcd:
          topic: /lidar_filter/filtered_points
          sensor_frame: lidar_link
          data_type: "PointCloud2"
          max_obstacle_height: 4.0
          min_obstacle_height: -2.0
          obstacle_max_range: 60.0 
          obstacle_min_range: 2.0
          clearing: True
          marking: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 0.8
        inflation_radius:  0.3

      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

# Generate and publish the static map occupancy grid. This occupancy grid is used to generate the global costmap.
map_server:
  ros__parameters:
    use_sim_time: False
    topic_name: "map"
    frame_id: "map"
    yaml_filename: "map_server_params.yaml"

# Save the map to a file if neededm when the map is received from the map server.
map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom_with_offset
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    use_sim_time: False
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid" # In Iron and older versions, "/" was used instead of "::"
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      tolerance: 0.25                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
      allow_unknown: true                 # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
      max_planning_time: 5.0              # max time in s for planner to plan, smooth
      motion_model_for_search: "DUBIN"    # Hybrid-A* Dubin, Redds-Shepp
      angle_quantization_bins: 72         # Number of angle bins for search
      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
      analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
      analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
      minimum_turning_radius: 0.3        # minimum turning radius in m of path / vehicle
      reverse_penalty: 2.0                # Penalty to apply if motion is reversing, must be => 1
      change_penalty: 1.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
      non_straight_penalty: 1.         # Penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 3.5                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.015
      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True     # Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      debug_visualizations: false         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
      use_quadratic_cost_penalty: False
      downsample_obstacle_heuristic: True
      allow_primitive_interpolation: False
      smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path

      smoother:
        max_iterations: 1000
        w_smooth: 0.2
        w_data: 0.5
        tolerance: 1.0e-10
        do_refinement: true
        refinement_num: 1

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    ## Server parameters
    use_sim_time: False
    controller_frequency: 1.0
    odom_topic: "odom_with_offset"
    # Min velocities to ignore
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    ## Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    ## Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 6.5
    ## Planner parameters
    controller_plugins: ["FollowPath"]
    FollowPath:
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "dwb_core::DWBLocalPlanner"
      angular_dist_threshold: 0.785
      forward_sampling_distance: 0.5
      rotate_to_heading_angular_vel: 1.8
      max_angular_accel: 3.2
      simulate_ahead_time: 0.5
      rotate_to_goal_heading: false


      # DWB Local Planner
      debug_trajectory_details: True
      # Speeds
      min_vel_x: -0.7
      max_vel_x: 0.7
      min_vel_y: -0.7
      max_vel_y: 0.7
      min_speed_theta: -0.5
      max_vel_theta: 0.5
      min_speed_xy: -0.7
      max_speed_xy: 1.0
      # Accelerations
      decel_lim_x: -1.0
      acc_lim_x: 1.0
      decel_lim_y: 0.0
      acc_lim_y: 0.0
      decel_lim_theta: -2.0
      acc_lim_theta: 2.0
      # Velocity samples
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      # Time to simulate ahead
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics:
        [
          "RotateToGoal",
          "Oscillation",
          "BaseObstacle",
          "GoalAlign",
          "PathAlign",
          "PathDist",
          "GoalDist",
        ]
      BaseObstacle.scale: 30.0
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

robot_state_publisher:
  ros__parameters:
    use_sim_time: False
